<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="client_time_notnull" xml:space="preserve">
    <value>Request parameter CLIENT_TIME cannot be empty</value>
  </data>
  <data name="eqp_id_notnull" xml:space="preserve">
    <value>Request parameter EQP_ID cannot be empty</value>
  </data>
  <data name="err_fixheader_fixtail" xml:space="preserve">
    <value>Fixed head and fixed tail cannot be empty at the same time</value>
  </data>
  <data name="err_get_data_failed" xml:space="preserve">
    <value>Failed to get SN data!</value>
  </data>
  <data name="err_get_laserdata" xml:space="preserve">
    <value>Failed to get mission data!</value>
  </data>
  <data name="err_machine_no_not_found" xml:space="preserve">
    <value>Device number does not exist, please confirm.</value>
  </data>
  <data name="err_nofomat" xml:space="preserve">
    <value>Serial number format is not set for item No. {0}.</value>
  </data>
  <data name="err_no_data" xml:space="preserve">
    <value>The radium engraving data transmitted by the radium engraving machine cannot be empty</value>
  </data>
  <data name="err_no_wo_data" xml:space="preserve">
    <value>The work order number cannot be blank</value>
  </data>
  <data name="err_radix_type" xml:space="preserve">
    <value>The base type setting is wrong, please contact the administrator</value>
  </data>
  <data name="err_rule_not_found" xml:space="preserve">
    <value>No automatic generation rule found, need to set the range manually</value>
  </data>
  <data name="err_runcard_ranger" xml:space="preserve">
    <value>The work order serial number range is not configured, please contact the administrator for handling</value>
  </data>
  <data name="err_sn_count_message" xml:space="preserve">
    <value>There is an error in getting the number of SN, please check!</value>
  </data>
  <data name="err_wo_not_found" xml:space="preserve">
    <value>Work order {0} does not exist, please confirm.</value>
  </data>
  <data name="err_wo_not_sn" xml:space="preserve">
    <value>No SN is available for the current work order</value>
  </data>
  <data name="err_wo_orderno" xml:space="preserve">
    <value>Please enter the work order number.</value>
  </data>
  <data name="laser_been_carved" xml:space="preserve">
    <value>The radium data on the radium engraving machine has been radium engraving!</value>
  </data>
  <data name="laser_failure_successfully" xml:space="preserve">
    <value>Failure to print successfully, no status update!</value>
  </data>
  <data name="laser_print_not_exist" xml:space="preserve">
    <value>Print task data does not exist!</value>
  </data>
  <data name="laser_result_err" xml:space="preserve">
    <value>The request parameter LASER_RESULT can only be 1 or 2</value>
  </data>
  <data name="model_notnull" xml:space="preserve">
    <value>The request entity cannot be empty</value>
  </data>
  <data name="need_retroactive_err" xml:space="preserve">
    <value>The request parameter NEED_RETROACTIVE can only be 0 or 1</value>
  </data>
  <data name="pcb_list_notnull" xml:space="preserve">
    <value>Request parameter PCB_LIST cannot be empty</value>
  </data>
  <data name="unit_mac_list_err" xml:space="preserve">
    <value>The number of SN to be returned must be equal to the number of small-plate Mac collections</value>
  </data>
  <data name="unit_mac_list_notnull" xml:space="preserve">
    <value>Request parameter UNIT_MAC_LIST cannot be empty</value>
  </data>
  <data name="unit_sn_count_notnull" xml:space="preserve">
    <value>Request parameter UNIT_SN_COUNT must be greater than 0</value>
  </data>
  <data name="work_order_notnull" xml:space="preserve">
    <value>Request parameter WORK_ORDER cannot be empty</value>
  </data>
</root>